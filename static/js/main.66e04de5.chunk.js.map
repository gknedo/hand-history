{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["defaultData","gameExtra","bigblind","matchExtra","toBB","stack","bb","concat","toFixed","renderGameExtra","_ref","e","pos","action","smallblind","chips","coins","cards","stateName","pot","pattern","renderStart","smallBlind","bigBlind","React","createElement","Typography","variant","ante","renderAnte","renderPlayerAction","patternStr","includes","renderNextRound","next","preflop","flop","turn","river","join","App","currentUrl","setCurrentUrl","useState","data","setData","isLoading","setIsLoading","name","playerCount","mttCurBlindLevel","mttprizecount","className","TextField","id","label","value","onChange","target","fullWidth","Button","onClick","async","handURL","length","console","log","handId","split","slice","response","fetch","ok","Error","status","result","json","JSON","stringify","handleClick","map","event","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.66e04de5.chunk.js","sourcesContent":["import './App.css';\r\nimport { Button, TextField, Typography } from '@mui/material';\r\nimport React, { useState } from 'react';\r\n\r\nconst defaultData = {\r\n  gameExtra: [{bigblind: 1}],\r\n  matchExtra: {},\r\n}\r\n\r\nconst renderStart = (smallBlind, bigBlind) => {\r\n  return <Typography variant=\"body1\">Blinds: {smallBlind}/{bigBlind}</Typography>\r\n}\r\n\r\nconst renderAnte = (ante) => {\r\n  return <Typography variant=\"body1\">Ante: {ante}</Typography>\r\n}\r\n\r\nconst toBB = (stack, bb) => {\r\n  return `${(stack/bb).toFixed(1)} BB`\r\n}\r\n\r\nconst renderPlayerAction = (action, pos, chips, coins, bb, pattern) => {\r\n  const patternStr = pattern !== \"\" ? `- ${pattern} ` : \"\";\r\n  if(action === \"SB\" || action === \"BB\") return;\r\n  if([\"check\", \"fold\"].includes(action)) return <Typography variant=\"body1\">{pos} {patternStr} - {action} ({toBB(coins, bb)} left)</Typography>\r\n  if([\"raise\", \"call\", \"bet\"].includes(action)) return <Typography variant=\"body1\">{pos} {patternStr} - {action} {toBB(chips, bb)} ({toBB(coins, bb)} left)</Typography>\r\n}\r\n\r\nconst renderNextRound = (cards, stateName, pot, bb) => {\r\n  let next = {\r\n    \"preflop\": \"FLOP\",\r\n    \"flop\": \"TURN\",\r\n    \"turn\": \"RIVER\",\r\n    \"river\": \"SHOWDOWN\"\r\n  }[stateName];\r\n\r\n  return <Typography variant=\"body1\">{next} - {cards.join(\" \")} - Pot {toBB(pot, bb)}</Typography>\r\n}\r\n\r\nconst renderGameExtra = ({e, pos, action, smallblind, bigblind, chips, coins, cards, stateName, pot, pattern}, bb) => {\r\n  if(e === \"startinfo\") return renderStart(smallblind, bigblind);\r\n  if(e === \"player_action\" && action === \"ante\" && pos === \"BTN\" ) return renderAnte(chips);\r\n  if(e === \"player_action\" ) return renderPlayerAction(action, pos, chips, coins, bb, pattern);\r\n  if(e === \"nextround\" ) return renderNextRound(cards, stateName, pot, bb);\r\n}\r\n\r\nfunction App() {\r\n  const [currentUrl, setCurrentUrl] = useState('');\r\n  const [data, setData] = useState(defaultData);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const bb = data.gameExtra[0].bigblind\r\n\r\n  const {name, playerCount, mttCurBlindLevel, mttprizecount} = data.matchExtra\r\n  const handleClick = async (handURL) => {\r\n    if(!handURL || handURL.length === 0) return;\r\n    console.log(handURL);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const handId = currentUrl.split(\"t=\")[1].split(\"&\")[0].slice(0,8);\r\n      console.log(handId);\r\n      const response = await fetch(`https://ra.supremapoker.net/supremaAPI/replayInfo.php?s=${handId}`);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n\r\n      console.log('result is: ', JSON.stringify(result, null, 4));\r\n\r\n      setData(result);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='main_body'>\r\n      <Typography variant=\"h2\">\r\n        Suprema Hand History\r\n      </Typography>\r\n      <div className='action_bar'>\r\n        <TextField\r\n          id=\"url-text\"\r\n          label=\"Hand Url\"\r\n          value={currentUrl}\r\n          onChange={(e) => setCurrentUrl(e.target.value)}\r\n          fullWidth\r\n        />\r\n        <Button variant=\"contained\" onClick={() => handleClick(currentUrl)}>Analyze</Button>\r\n\r\n      </div>\r\n      <Typography variant=\"body1\">{name}</Typography>\r\n      {data.gameExtra.map((event) => renderGameExtra(event, bb))}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}